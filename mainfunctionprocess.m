%% November 28, 2012% Run the 1st season code to process the 2nd season PMC data% Check whether altitudes or any codes have mistakes% Rename Results/.../PMCFe to "PMCFe_1stSeason2011GRL", indicating the% original results for 2011 GRL publication on the 1st season PMC study% Copy the original PMCFe as the Results/.../PMCFe so that we don't have to% change the directories in the code%% April 9, 2011 -- Modify Rothera PMC code to McMurdo PMC code % The main ideas (as changed from Rothera) include: % (1) to handle "reading raw data" in "mainprocessPMC.m" code;% i.e., read in all raw data profiles, and then transfer the% unit time interval data to "PMC2CHsetprocess.m", "PMC1CHsetprocess.m" and% "PMCunitprocess.m". This idea makes the "PMCunitprocess.m" universal as% the format-dependent raw data reading is removed.% (2) to use global variables so that minimizing the number of parameters% to be transferred between functions% (3) to add more user-controllable parameters% (4) to implement the new code from mainprocessOverview.m so that the code% can handle data sets that were taken in multiple days, e.g., January% 15-18, 2011.% (5) to implement the atmosnrlmsise00.m code for computing MSISE-00% temperature and number density%% September 8, 2004% Further upgrade the code to process both PMC and Fe density data for different cases.% There are 4 numbers to be combined to determine the case: % sys1-on/off, sys1-Fe/Rayleigh, sys2-on/off, sys2-Fe/Rayleigh.% add "bkgfit" parameter (1 or 0) in the data file to mark each day whether% we subtract constant background (0) or tilted background using fit (1)% For the Rothera December 2003 data when we have both channels data on% resonance, I modified the single channel PMC code to use two channels% data to remove Fe contamination for PMC search. Basically, it is the same% as the code written for processing Rothera 2002-2003 summer data.% However, since I changed the spt (set, profile, time) saving format, we% need to modify the two-channel code to cooperate in these changes.% -- 7/17/04% I changed to save [set, profile, time] information in the preview% process, so re-write the processing code to coordinate this (thus, we can% divide the sp into different uniform time interval) -- July 13, 2004% Rothera January 2004 data had only single channel -- 374nm off resonance.% So we need to use different way to process PMC data (Rayleigh lidar)% Fe contamination is avoided, thus, we use one channel to judge PMCs -- 7/13/04% Based upon processFePMC.m code, I modify it to process PMC data with auto-run for different days for different hours% After Cambridge Wavelength Scan in August 2002, I re-calculated the effective cross-section% for both channels, which are about half of previous value due to the pedestal.% Modify the code to re-calculate Fe density to investigate Fe depletion effect at the pole. % This will NOT affect the volume backscatter coefficient since it is independent on cross-section of Fe resonance% ---- November 3, 2002 at Oxford% To solve background problem, change background range from 140-180 km to 115-140 km% ---- June 29, 2002% This program is to calculate the profiles in each UT hours for multi days.% It has included all the cases of single channel data for either channel and at any time (beginning, in the middle, end)% The parameters we derived are Beta372 (beta for 372 channel), Beta374 (Beta for 374 channel), % BetaFe (Beta for pure Fe signal after subtracting PMC), DensityFe (pure 372nm Fe density).% ---- May 25-26, 2002% To process the PMC data collected at South Pole by Fe Boltzmann Temperature LIDAR% To derive Fe density from two channels when PMC present % to see whether Fe atoms are removed either by Fe compound as nuclei or Fe atoms attached to ice surface% The idea of data processing is to subtract both PMC signal and Rayleigh signal by taking the% difference between two channels. By assuming the atmosphere temperature as the MSIS00 temperature,% the 372nm Fe density is K(z) times of 374nm Fe density. Then the 372nm Fe density can be derived% from the difference of two channels.% The goal is to obtain the time history of both Fe and PMC layers.% Modify the code for calculating pure Fe signal by subtracting PMC from total signal% ---- Oct. 10, 2001 at Monterey%% Year Month Day (YMD) list for McMurdo lidar data% YMDayList=[2010 12  16  17  18  NaN     % year, month, and multiple days%     2010	12	24  25  26  NaN%     2011    01  15  16  17  18%     2011    01  23  NaN  NaN  NaN];% year = YMDayList(2,1); month = YMDayList(2,2); day = YMDayList(2,3:end);%year = 2012; month = 01; day =  [5 6 10 11 12];%  year = 2012; month = 1; day =  5;% % read in the date-list for Rothera lidar data% load /Users/chu/Tiger/ScienceProjects/Rothera/DataProcess/RotheraPMC/RotheraPMCmdych.dat% FePMCmdych=RotheraPMCmdych;         % [month, day, year, number-of-channels, 374-on/off, sys1-Fe/Rayleigh, 372-on/off, sys2-Fe/Rayleigh, bkgfit]function [] = mainfunctionprocess(year,month,day)%% User-controllable data processing parametersglobal PMTsaturation_correction_yn Chopper_correction_yn Background_fit_yn Smooth_PhotonCnt_yn RayleighNormChoiceglobal SavePMCData SaveFeData PlotFigure SaveFigure PlotRayFigure_ynglobal Location BaseAlt latitude longitude fluxindex checkE checkEELocation = 1;                       % 1 = McMurdo, 2 = Boulder, 3 = Rothera, 4 = South Pole        % Location selection affects "Base Altitude", "Latitude", "Longitude" and "Local Time" in data processingfluxindex = 1;                      % 1 = use default F107 and AP for MSISE00, 2 = use observed F107 and APPMTsaturation_correction_yn = 0;    % 0 = no correction, 1 = do correctionChopper_correction_yn = 0;          % 0 = no correction, 1 = do correctionBackground_fit_yn = 0;              % 0 = constant background, 1 = tilted background so fitting is neededSmooth_PhotonCnt_yn = 1;            % 0 = not to smooth, 1 = to smooth photon countsRayleighNormChoice = 1;             % 1 = Take one point via mean(log); 2 = Take sum of a rangeScreenRawData = 1;                  % 0 = no screening, 1 = do raw data screeningSaveStatData = 1;                   % 0 = not to save statistic data, 1 = save stat data to harddriveSaveSmdData = 1;                    % 0 = not to save smoothed data, 1 = save smoothed data to harddriveSaveStatFigure = 1;                 % 0 = not to save statistic figure, 1 = save stat figure to harddriveSaveContFigure = 1;                 % 0 = not to save contour figure, 1 = save contour figure to harddrive %PlotFigure = 0;                     % 0 = not to plot stat figure, 1 = plot stat figurePlotRawProfile = 1;                 % 0 = not to plot each raw profile, 1 = plot each raw profilePlotRayFigure_yn = 0;               % 0 = not to plot Rayleigh fit, 1 = plot Rayleigh fitSmoothOrder = 1;                    % 1 = Smooth in time and then range, 2 = Smooth in range and then timeSmoothWidthTime = 4;                % 1 = 0.25-h Full Width, 2 = 0.5-h FW, 3 = 1-h FW, 4 = 2-h FW, 5 = 3-h FWSmoothWidthAlt = 3;                 % 1 = 1-km Full Width, 2 = 1.5km FW, 3 = 2km FW, 4 = 2.5km FW, 5 = 3km FWResolutionTime = 3;                 % 1 = 1.5-min Resolution, 2 = 6-min res, 3 = 0.25-h res, 4 = 0.5-h res, 5 = 1-hr resResolutionAlt = 1;                  % 1 = 48-m Resolution, 2 = 0.1-km res, 3 = 0.5-km res, 4 = 1-km res, 5 = 2-km resProcess4temp = 1;                   % 0 = not for temperature (save statistic and high-resolution data),                    % 1 = for temperature (not to save stat data but save low-res data to different names)SavePMCData = 1;SaveFeData = 1;PlotFigure = 1;SaveFigure = 1;PlotRayFigure = 1;chopperyn = 0;%% universal constants for all cases of single or both channels% %binrange=round([45 55 75 125 140 180]/Rawbinwid);		% classic/traditional background range 140-180 km% %binrange=round([45 55 75 125 115 140]/Rawbinwid);		% try new background range to solve negative problem% %binrange=round([45 55 75 125 110 130]/Rawbinwid);		% try new background range to solve negative problem% binrange=round([45 55 70 120 120 160]/Rawbinwid);		% try new background range to solve negative problem (125-150km)% %binrange=round([45 55 70 120 110 130]/Rawbinwid);		% for January 17, 2004; Feb 15, 2004 (a little tilted background)% %binrange=round([45 55 70 120 90 110]/Rawbinwid);		% try new background range to solve negative problem%                   % change Fe range to 70-120 km for PMC beta computation in larger rangeHammingFWHM = 20;			% half bin number for Hamming window (2*m+1)%% Location Selection affects base altitude, latitude and longitude (local time vs. UT)% Latitude and longitude will affect "atmosnrlmsise00" outputs of temperature and atmospheric densityif (Location == 1)          % McMurdo, Antarctica    BaseAlt = 190;          % unit: m    latitude = -77.85;      % 77.85 deg South    longitude = 166.67;     % 166.67 deg Eastelseif (Location == 2)      % Boulder, Colorado    BaseAlt = 1600;         % unit: meter    latitude = 40.1278;     % 40 deg 07.665 min North    longitude = -105.2437;  % 105 deg 14.620 min Westelseif (Location == 3)      % Rothera, Antarctica    BaseAlt = 15;           % unit: m    latitude = -67.5;       % 67.5 deg South    longitude = -68.0;      % 68.0 deg Westelseif (Location == 4)      % South Pole, Antarctica    BaseAlt = 2840;         % unit: m    latitude = -90;         % 90 deg South    longitude = 0;          % All longitude lines cross at the South Poleendazimuth = 0;elevation = 90;global smonth zulumonthsmonth = ['JA';'FB';'MR';'AR';'MY';'JN';'JL';'AG';'SP';'OT';'NV';'DC'];zulumonth = [31;28;31;30;31;30;31;31;30;31;30;31];		% day numbers in each month through whole yearzuluday = sum(zulumonth(1:month-1))+day;	% convert to zulu day (1-365)global Fe_start_alt Fe_end_alt vert_bin_res Rayleigh_sum_start_alt Rayleigh_sum_end_alt Rayleigh_norm_altglobal Rayleigh_fit_start_alt Rayleigh_fit_end_alt Rayleigh_fit_alt BG_start_alt BG_end_alt BG_start_alt2 BG_end_alt2global temp_default wind_default density_default time_adjust max_temp min_temp max_wind minimum_signal Hamming_widthglobal RTUpperLim1 RTLowerLim1 RWUpperLim1 RWLowerLim1BG_start_alt = 130e3;             % unit: m for all altitudesBG_end_alt = 180e3;BG_start_alt2 = 70e3; BG_end_alt2 = 75e3;Rayleigh_sum_start_alt = 45.0e3;Rayleigh_sum_end_alt = 55.0e3;Rayleigh_norm_alt = 50.0e3;Rayleigh_fit_start_alt = 45e3;Rayleigh_fit_end_alt = 55e3;Rayleigh_fit_alt = 50.0e3;Fe_start_alt = 75e3;Fe_end_alt = 115e3;Hamming_width = 1920;vert_bin_res = 1;temp_default = 200;               % unit: Kwind_default = 0;                 % unit: m/sdensity_default = 1e7;            % unit: ?time_adjust = 0.;max_temp = 500;min_temp = 100;max_wind = 200;minimum_signal = 50;RTUpperLim1 = 1.799294;         % limits of RT & RW when AOM shift = 630MHzRTLowerLim1 = 0.059951;RWUpperLim1 = 1.977745;RWLowerLim1 = -1.063667;%% Fundamental Constants and Atomic Fe Constantsglobal pi c h Me Qe E0 kB AMU NA mFeMean mFeIsotope AbundanceFe DeltaE_diff global Aki_Fe372 gk_Fe372 gi_Fe372 RB_Fe372 Lambda_Center_Fe372 fosc_Fe372 IsotopeShift_Fe372global Aki_Fe374 gk_Fe374 gi_Fe374 RB_Fe374 Lambda_Center_Fe374 fosc_Fe374 pi = 3.14159265;                    % Accurate value of pic = 2.99792458e8;                   % light speed (m/s)h = 6.62606896e-34;                 % Planck constant (unit: Js)Me = 9.10938215e-31;                % mass of electron (unit: kg)Qe = 1.602176487e-19 ;              % charge of electron (unit: C)E0 = 8.854187817e-12;               % (unit: F/m)kB = 1.3806504e-23;                 % Boltzmann constant (Unit:  J/K)AMU = 1.660538782e-27;              % Atomic mass constant (unit: kg)NA = 6.02214179e23;                 % Avogadro constant (unit: mol^-1)mFeMean = 55.845*1e-3/NA;           % mean mass of Fe atom (unit: kg)mFeIsotope = [53.9396,55.9349,56.9354,57.9333]*1e-3/NA;                                    % mass of Fe atom for each isotope (unit: kg)AbundanceFe = [0.0585,0.9175,0.0212,0.0028];                                    % natural abundance for Fe 54, 56, 57, and 58 isotopesDeltaE_diff = 415.932;              % energy level difference between ground state (a5D4) and (a5D3) (unit: cm^-1)                                    Aki_Fe372 = 0.163e8;                % Enstein A coefficient for Fe 372-nm linegk_Fe372 = 2*5+1;                   % degeneracy factor of Fe first excited state for 372nm linegi_Fe372 = 2*4+1;                   % degeneracy factor of Fe ground state for 372nm lineRB_Fe372 = 0.9959;                  % Branching ratio for Fe 372-nm absorption line (refer to spectroscopy HW#5)Lambda_Center_Fe372 = 744.1992e-9 / 2;  % center wavelength of Fe 372 nm line in vacuum (m)                                    % measured by Burleigh WA-1500 wavemeter at Doppler-broadened peak from sky returnfosc_Fe372 = E0*Me*c/(2*pi*Qe.^2)*gk_Fe372/gi_Fe372*Lambda_Center_Fe372.^2*Aki_Fe372;                                    % oscillator strength of Fe 372nm line (dimensionless)IsotopeShift_Fe372 = [-725e6,0,495e6,669e6];                                         % isotopic shift with respect to Fe56 (unit: Hz)               % isotopic shifts for Fe 54 and 57 are from hollow cathod discharge cell [Smeets et al., Appl. Phys. B, 2003]              % isotopic shift for Fe 58 is from Kaletta thesis [1969]              Aki_Fe374 = 0.142e8;                % Enstein A coefficient for Fe 374-nm linegk_Fe374 = 2*4+1;                   % degeneracy factor of Fe first excited state for 374nm linegi_Fe374 = 2*3+1;                   % degeneracy factor of Fe ground state for 374nm lineRB_Fe374 = 0.9079;                  % Branching ratio for Fe 374-nm absorption line (refer to spectroscopy HW#5)Lambda_Center_Fe374 = 747.6394e-9 / 2;  % center wavelength of Fe 374 nm line in vacuum (unit: m)                                    % measured by Burleigh WA-1500 wavemeter at Doppler-broadened peak from sky returnfosc_Fe374 = E0*Me*c/(2*pi*Qe.^2)*gk_Fe374/gi_Fe374*Lambda_Center_Fe374.^2*Aki_Fe374;% pi = 3.14159265;                % accurate pi value% c = 2.99792458e8;               % light speed in vacuum (unit: m/s)% h = 6.6260693e-34;              % Planck constant (unit: J s)% kB = 1.3806508e-23;             % Boltzmann constant (Unit: J/K)% Me = 9.1093897e-31;             % mass of electron (unit: kg)% Qe = 1.60217733e-19;            % charge of electron (unit: C)% E0 = 8.854187817e-12;           % (unit: F/m)% AMU = 1.6605402e-27;            % Atomic mass unit% fosc372 = 0.0414;               % Oscillator strength for Fe 372nm line% fosc374 = 0.0382;               % Oscillator strength for Fe 374nm line% FeStandard = 55.845;            % standard atomic weight of Fe in amu% RB = [0.9079,0.9959];           % Branching ratio for 374 and 372 nm of Fe absorption lines% g1 = 9;                         % degeneracy factor for the lowest level (a 5D4) of Fe ground state% g2 = 7;                         % degeneracy factor for the level (a 5D3) of Fe ground state% DeltaE = 415.932;               % energy level splitting between (a 5D4) and (a 5D3) (unit: cm^-1)% Lambda_center_Fe372nm = 744.1992e-9 / 2;     % center wavelength (m)% Lambda_center_Fe374nm = 747.6394e-9 / 2;     % center wavelength (m)% EarthRadius = 6371e3;           % radius of the Earth (unit: m)%% Fe Boltzmann lidar receiver parametersglobal Deadtime_PMT Deadtime_Disc MAX_Countrate% MAX_Countrate = 55e6;           % maximum count rateDeadtime_PMT = 20e-9;           % PMT dead time (s)Deadtime_Disc = 10e-9;          % Discriminator dead time (s)%% Linear PAL laser information (central wavelength, peak freq offset, linewidth, energy portion/pedestal, ...)global PAL374Eportion PAL372Eportion PAL374RMSwidth PAL372RMSwidth global PAL374Detune PAL372Detune PAL374WL PAL372WL dEoverKBPAL374Eportion = [0.814,0.186];     % Energy portions of narrow peak and pedestal for 374-nm PAL (dimensionless)PAL372Eportion = [0.896,0.104];     % Energy portions of narrow peak and pedestal for 372-nm PAL (dimensionless)PAL374RMSwidth = [408.5,15e3]*1e6;  % Laser RMS width of Gaussian linewidth for the peak and pedestal (unit: Hz)PAL372RMSwidth = [572.1,15e3]*1e6;  % Laser RMS width of Gaussian linewidth for the peak and pedestal (unit: Hz)PAL374Detune = 51.38e6;             % PAL 374nm laser central frequency detuned related to 56Fe peak (unit: Hz)        % The Fe peak freq is at -51.38 MHz relative to the laser wavelength 747.6394nm/2        % If assuming the Fe peak is the 56Fe peak, the laser central freq detune is +51.38 MHz from the 56Fe peakPAL372Detune = -23.8e6;             % PAL 372nm laser central frequency detuned related to 56Fe peak (unit: Hz)PAL374WL = 747.6394e-9 / 2;         % unit: meterPAL372WL = 744.1992e-9 / 2;         % unit: meterdEoverKB = h*c*100*DeltaE_diff/kB;       % dEoverKB = 598.438 K;%% Read in raw data profiles for an entire dataset, form DataInfo and RawData matrixes% DataInfo matrix and RawData matrix are used in the PMC 1 or 2 channel% setprocess and unitprocess subroutinesfor system = 1:2    %Sys 1 --> CH1    %Sys 2 --> CH2    for dd = 1:length(day)%         if (dd == 2)    % special case for December 25, 2010 at McMurdo%             fp = fopen([sprintf('/Users/Chu/Tiger/ScienceProjects/McMurdo/SkyTests/%04d%s%02dA/RX%d/filelist',year,smonth(month,:),day(dd),system)],'r');%         elseif (dd == 3)%             fp = fopen([sprintf('/Users/Chu/Tiger/ScienceProjects/McMurdo/SkyTests/%04d%s%02dB/RX%d/filelist',year,smonth(month,:),day(dd),system)],'r');%         else%             fp = fopen([sprintf('/Users/Chu/Tiger/ScienceProjects/McMurdo/SkyTests/%04d%s%02d/RX%d/filelist',year,smonth(month,:),day(dd),system)],'r');%         end        if (ScreenRawData == 0)           fp = fopen(sprintf('/Users/dacostalindo/Desktop/Research/SkyObservations/%04d%s%02d/RX%d/GoodfilelistUpdated.txt',year,smonth(month,:),day(dd),system),'r');             Numofprofile(dd) = fscanf(fp,'%d',[1]);        elseif (ScreenRawData == 1)            fp = fopen(sprintf('/Users/dacostalindo/Desktop/Research/SkyObservations/%04d%s%02d/RX%d/GoodfilelistUpdated.txt',year,smonth(month,:),day(dd),system),'r');             Numofprofile(dd) = fscanf(fp,'%d',[1]);         end                %Variables name of profile just has the names of all the files        %listed in Rx#. If we are combining multiple days, the letters nn        % jj are used to create the final two matrices DATAInfo# by        % concatenating all the data.        for ii=1:Numofprofile(dd)            if (dd > 1)                jj = ii + sum(Numofprofile(1:dd-1));        % for handling multiple days of data            elseif (dd == 1)                jj = ii;            end            nameofprofile(jj,:) = fscanf(fp,'%s',[1]); % read profile name listed in the "filelist" or "Goodfilelist"                    end        fclose(fp);                for mm = 1:Numofprofile(dd)            if (dd > 1)                nn = mm + sum(Numofprofile(1:dd-1));            elseif (dd == 1)                nn = mm;            end%             if (dd == 2)%                 fpin = fopen([sprintf('/Users/Chu/Tiger/ScienceProjects/McMurdo/SkyTests/%04d%s%02dA/RX%d/%s',year,smonth(month,:),day(dd),system,nameofprofile(mm,:))],'r');%             elseif (dd == 3)%                 fpin = fopen([sprintf('/Users/Chu/Tiger/ScienceProjects/McMurdo/SkyTests/%04d%s%02dB/RX%d/%s',year,smonth(month,:),day(dd),system,nameofprofile(mm,:))],'r');%             else%                 fpin = fopen([sprintf('/Users/Chu/Tiger/ScienceProjects/McMurdo/SkyTests/%04d%s%02d/RX%d/%s',year,smonth(month,:),day(dd),system,nameofprofile(mm,:))],'r');%             end '/Users/asta10/Desktop/Research/SkyObservations/%04d%s%02d/RX%d/filelist.txt'%             fpin = fopen([sprintf('/Users/Chu/Tiger/ScienceProjects/McMurdo/SkyTests/%04d%s%02d/RX%d/%s',year,smonth(month,:),day(dd),system,nameofprofile(mm,:))],'r');            fpin = fopen([sprintf('/Users/dacostalindo/Desktop/Research/SkyObservations/%04d%s%02d/RX%d/%s',year,smonth(month,:),day(dd),system,nameofprofile(nn,:))],'r');            fgetl(fpin); fgetl(fpin); fgetl(fpin); fgetl(fpin); fgetl(fpin);%??????            time(nn) = fscanf(fpin,'%f', [1]) + (day(dd)-day(1))*24;  %time diff 0.178            fgetl(fpin); fgetl(fpin); fgetl(fpin); fgetl(fpin);             BinTime(nn) = fscanf(fpin,'%f', [1]);fgetl(fpin);            binrange = c*BinTime(nn)*1e-9/2;            BinWidth = round(binrange);            fgetl(fpin);            ShotsNum(nn) = fscanf(fpin,'%f', [1]);fgetl(fpin);            fgetl(fpin);            BinNum = fscanf(fpin,'%f', [1]); BinNum = round(BinNum);fgetl(fpin); %4096?            fgetl(fpin);fgetl(fpin);fgetl(fpin);fgetl(fpin);fgetl(fpin);fgetl(fpin);fgetl(fpin);            fgetl(fpin);fgetl(fpin);fgetl(fpin);fgetl(fpin);fgetl(fpin);fgetl(fpin);fgetl(fpin);%             rawphotoncnt = fscanf(fpin,'%f',[1 inf]);            RawPhotonCnt(nn,:) = fscanf(fpin,'%f',[1 BinNum]);            fclose(fpin);            DataInfo(nn,:) = [year month day(dd) time(nn) ShotsNum(nn) BinTime(nn)];%             DataInfo = [year month day(dd) time(nn) azimuth elevation BaseAlt BinNum ShotsNum BinWidth binrange];        end    end    %     %     if (system == 1) && makeGoodfileList==1 %CH1%         DataInfo1 = [DataInfo str2num(NUM)];%         RawData1 = RawPhotonCnt;%         templateA = nameofprofile(jj,1:11);%     elseif (system == 2) && makeGoodfileList==1%CH2%         DataInfo2 = [DataInfo str2num(NUM)];%         RawData2 = RawPhotonCnt;%         templateB = nameofprofile(jj,1:11);%     elseif  (system == 1)  %CH1%         DataInfo1 = DataInfo ;%         RawData1 = RawPhotonCnt;%     elseif (system == 2) %CH2%         DataInfo2 = DataInfo ;%         RawData2 = RawPhotonCnt;%         end%          if (system == 1) && Numofprofile ~=0 %CH1        DataInfo1 = DataInfo;        RawData1 = RawPhotonCnt;            elseif (system == 2)&& Numofprofile ~=0 %CH2        DataInfo2 = DataInfo;        RawData2 = RawPhotonCnt;    end    clear DataInfo RawPhotonCnt time ShotsNum BinTime nameofprofile Numofprofileend                %% PMC data process for an entire dataset% for dd=1:length(FePMCmdych(:,2))	% for different days%     clear PMCyn spt spt1 spt2 time time1 time2 sp sp1 sp2 NumofProf NumofProf1 NumofProf2 t0 FeInfo% 	mdy=FePMCmdych(dd,1:3)% 	month=mdy(1);% 	day=mdy(2);% 	year=mdy(3);% 	year2=year-1900;			% 4-digit year% 	ssystem=['A','B'];						% 	smonth=['JA';'FB';'MR';'AR';'MY';'JN';'JL';'AG';'SP';'OT';'NV';'DC'];% 	if (year2>=100)% 		year2=year2-100;% 	end%     %     %NumChannel=FePMCmdych(dd,4)         % number of channels of data we have for PMC observations%     sys1onoff=FePMCmdych(dd,5);     % system1 (374nm) is turned on or off (1=on, 0=off)%     sys1FeRay=FePMCmdych(dd,6);     % system1 (374nm) is Fe or Rayleigh (i.e., on or off resonance: 1=Fe, 2=Rayleigh, NaN=off)%     sys2onoff=FePMCmdych(dd,7);     % system2 (372nm) is turned on or off (1=on, 0=off)%     sys2FeRay=FePMCmdych(dd,8);     % system2 (372nm) is Fe or Rayleigh (i.e., on or off resonance: 1=Fe, 2=Rayleigh, NaN=off)%     bkgfit = FePMCmdych(dd,9);  % background fit or constant background%     if (sys1onoff==1 & sys2onoff==1 & sys1FeRay==1 & sys2FeRay==1)%         NumChannel=2;       % when both systems are turned on and both are on-resonance for Fe layers%     else%         NumChannel=1;       % when one of the systems is not on-resonance%     end%         NumChannel = 2;    filenum = 0;    if (NumChannel == 1)       % single channel lidar data for PMC search (Rayleigh) or for Fe density        if (sys1FeRay==2 | sys2FeRay==2)    % any one of the channels running as Rayleigh lidar (off-resonance)            % going to call single-channel-PMC-analysis            if (sys1onoff==1 & sys1FeRay==2)    % for 374nm channel off-resonance for January 2004        	    system = 1;		            elseif (sys2onoff==1 & sys2FeRay==2)    % for 372nm channel off-resonance on 12/09/2003                system=2;            end            filename=(sprintf('/Users/haoyuli/PMC_processing/daily_info/%s%02d%02d/DataSTAT/SetProfileList37%dnm%s%02d%02d.dat',smonth(month,:),day,year2,4/system,smonth(month,:),day,year2));            spt=load(filename,'-ASCII');        % [set profile time]            time=spt(:,3);            tmin=min(floor(time));      % minimum UT hour            tmax=max(ceil(time));     % maximum UT hour            dt=1;       % the time interval for each integration            %dt=0.5;       % the time interval for each integration (for Jan 19, 2003 Fe density computation)            t0=[tmin:dt:tmax];      % set the time bin for PMC integration            for tt=1:length(t0)-1                clear sp                NumofProf(tt)=length(find(time>=t0(tt) & time<t0(tt+1)));                if (NumofProf(tt)>0)                    filenum=filenum+1;                    sp=spt(find(time>=t0(tt) & time<t0(tt+1)),1:2);                    [PMCyn(tt)]=AnalyzeUnitPMC(NumChannel,system,filenum,mdy,t0(tt),sp,HammingFWHM,Rawbinwid,binwid,ConstantBase,binrange,chopperyn,SavePMCData,PlotPMCFigure,PlotRayFigure,SaveFigure,bkgfit);                else                    PMCyn(tt)=NaN;      % NaN means no data in this time-bin                end            end     % next time bin            % save daily information, e.g., sp for each interval, hourly profile number, etc.            filename=(sprintf('/Users/haoyuli/PMC_processing/daily_info/%s%02d%02d/PMCFe/PMCsearch37%dnm%s%02d%02d.dat',smonth(month,:),day,year2,4/system,smonth(month,:),day,year2));            tobesaved=[t0(1:length(t0)-1)' PMCyn' NumofProf'];      % [time-bin      PMC-yes-or-no     Number-of-Profile-in-each-time-bin]            save(filename,'tobesaved','-ASCII');        elseif (sys2FeRay==1 | sys1FeRay==1)   % 372nm channel is on-resonance for Fe density            if (sys2onoff==1 & sys2FeRay==1)                system=2;            elseif (sys1onoff==1 & sys1FeRay==1)                system=1;            end            filename=(sprintf('/Users/haoyuli/PMC_processing/daily_info/%s%02d%02d/DataSTAT/SetProfileList37%dnm%s%02d%02d.dat',smonth(month,:),day,year2,4/system,smonth(month,:),day,year2));            spt=load(filename,'-ASCII');        % [set profile time]            time=spt(:,3);            tmin=min(floor(time));      % minimum UT hour            tmax=max(ceil(time));     % maximum UT hour            dt=1;       % the time interval for each integration            t0=[tmin:dt:tmax];      % set the time bin for PMC integration            for tt=1:length(t0)-1                clear sp                NumofProf(tt)=length(find(time>=t0(tt) & time<t0(tt+1)));                if (NumofProf(tt)>0)                    filenum=filenum+1;                    sp=spt(find(time>=t0(tt) & time<t0(tt+1)),1:2);                    [FeInfo(tt)]=AnalyzeUnitFe(NumChannel,system,filenum,mdy,t0(tt),sp,HammingFWHM,Rawbinwid,binwid,ConstantBase,binrange,chopperyn,SaveFeData,PlotPMCFigure,PlotRayFigure,SaveFigure,bkgfit);                else                    FeInfo(tt)=NaN;      % NaN means no data in this time-bin                                         end            end     % next time bin            % save daily information, e.g., sp for each interval, hourly profile number, etc.            filename=(sprintf('/Users/chu/Tiger/ScienceProjects/Rothera/DataProcess/%s%02d%02d/PMCFe/FeDensity37%dnm%s%02d%02d.dat',smonth(month,:),day,year2,4/system,smonth(month,:),day,year2));            tobesaved=[t0(1:length(t0)-1)' FeInfo' NumofProf'];      % [time-bin      PMC-yes-or-no     Number-of-Profile-in-each-time-bin]            save(filename,'tobesaved','-ASCII');        end     % end of judgement for Rayleigh or Fe lidar data               %% Two channels, start here!        elseif (NumChannel == 2) && (exist('DataInfo1','var')==1) && (exist('DataInfo2','var')==1) % two channels (on-resonance) lidar data for PMC search and Fe layer        time1 = DataInfo1(:,4); %%Time for CH1        time2 = DataInfo2(:,4); %%Time for CH2     %Find overlap between time1 & time2           tmin = min(min(floor(time1)),min(floor(time2)));    % minimum UT hour        tmax = max(max(ceil(time1)),max(ceil(time2)));      % maximum UT hour        dt = 1;         % the time interval for each integration (normal PMC and Fe computation)        t0 = [tmin:dt:tmax];      % set the time bin/interval for PMC integration                               NumofProf1(1:length(t0)-1) = 0;         NumofProf2(1:length(t0)-1) = 0;        PMCyn(1:length(t0)-1) = 0; FeInfo(1:length(t0)-1) = 0;        for tt = 1:length(t0)-1            clear sp1 sp2 RawCnt1 RawCnt2 Info1 Info2            NumofProf1(tt) = length(find(time1>=t0(tt) & time1<t0(tt+1))); %Find # of times in time1 and time2 that greater than t0(tt)            NumofProf2(tt) = length(find(time2>=t0(tt) & time2<t0(tt+1)));  %t0 = [0,1,...,24],  tt = 1:length(t0)-1            if (NumofProf1(tt)>0 & NumofProf2(tt)>0)                filenum = filenum + 1;                Info1 = DataInfo1(find(time1>=t0(tt) & time1<t0(tt+1)),:);                RawCnt1 = RawData1(find(time1>=t0(tt) & time1<t0(tt+1)),:);                Info2 = DataInfo2(find(time2>=t0(tt) & time2<t0(tt+1)),:);                RawCnt2 = RawData2(find(time2>=t0(tt) & time2<t0(tt+1)),:);              [varargout] = interactive(Info1,RawCnt1,Info2,RawCnt2,t0(tt),HammingFWHM,filenum);                PMCyn(tt) = varargout(1);                FeInfo(tt)= varargout(2);                    %                 %                 if makeGoodfileList ==1%                  if abs(imag(checkE)) == 0 && abs(imag(checkEE)) == 0%                if flagGoodFiles == 0%                    %                goodfiles1 = Info1; %                goodfiles2 = Info2;%                flagGoodFiles = 1;%     %                else%                    %                goodfiles1 = [goodfiles1; Info1] ;%                goodfiles2 = [goodfiles2;Info2] ;%                 %                end%                  end%                  %                 end%                                 %                 [PMCyn(tt),FeInfo(tt)] = AnalyzeUnitPMC2ch(NumChannel,filenum,mdy,t0(tt),sp1,sp2,HammingFWHM,Rawbinwid,binwid,ConstantBase,binrange,chopperyn,SavePMCData,SaveFeData,PlotPMCFigure,PlotRayFigure,SaveFigure,bkgfit);%            elseif (NumofProf1(tt)>0)%                 % call single channel process for PMC%                 system = 1;%                 filenum = filenum+1;%                 Info1 = DataInfo1(find(time1>=t0(tt) & time1<t0(tt+1)),:);%                 RawCnt1 = RawData1(find(time1>=t0(tt) & time1<t0(tt+1)),:);%                % [PMCyn(tt)] = PMC1CHsetprocess(Info1,RawCnt1,t0(tt),HammingFWHM,filenum);%                [PMCyn(tt)] = PMC1CHsetprocess(Info1,RawCnt1,t0(tt),HammingFWHM,filenum);%                % %                 [PMCyn(tt)] = AnalyzeUnitPMC(NumChannel,system,filenum,mdy,t0(tt),sp1,HammingFWHM,Rawbinwid,binwid,ConstantBase,binrange,chopperyn,SavePMCData,PlotPMCFigure,PlotRayFigure,SaveFigure,bkgfit);%                 FeInfo(tt) = NaN;    %             elseif (NumofProf2(tt)>0)%                 % call single channel process for Fe%                 system = 2;%                 filenum = filenum+1;%                 Info2 = DataInfo2(find(time2>=t0(tt) & time2<t0(tt+1)),:);%                 RawCnt2 = RawData2(find(time2>=t0(tt) & time2<t0(tt+1)),:);%                 [FeInfo(tt)] = Fe1CHsetprocess(Info2,RawCnt2,t0(tt),HammingFWHM,filenum);% %                 [FeInfo(tt)] = AnalyzeUnitFe(NumChannel,system,filenum,mdy,t0(tt),sp2,HammingFWHM,Rawbinwid,binwid,ConstantBase,binrange,chopperyn,SaveFeData,PlotPMCFigure,PlotRayFigure,SaveFigure,bkgfit);%                 PMCyn(tt) = NaN;                                                                          else                PMCyn(tt) = NaN;                FeInfo(tt) = NaN;            end        end     % next time bin        % save daily information for two channels of data, e.g., sp for each interval, hourly profile number, etc.        %filename=(sprintf('/Users/chu/Tiger/ScienceProjects/Rothera/DataProcess/%s%02d%02d/PMCFe/PMCsearch2ch%s%02d%02d.dat',smonth(month,:),day,year2,smonth(month,:),day,year2));        %tobesaved=[t0(1:length(t0)-1)' PMCyn' NumofProf1' NumofProf2'];      % [time-bin      PMC-yes-or-no     Number-of-Profile-in-each-time-bin]        %save(filename,'tobesaved','-ASCII');    end     % end of condition judgement for number of data-channels% end		% next day% % if (makeGoodfileList ==1)%     system = 1;%  fpout = fopen(sprintf('/Users/asta10/Desktop/Research/PMCs/%04d%s%02d/RX%d/Goodfilelist.txt',year,smonth(month,:),day(dd),system),'w');%  fprintf(fpout,'%d \n',length(goodfiles1))%  for i = 1: length(goodfiles1)%  fprintf(fpout,'%s%04d\n',templateA,goodfiles1(i,7));%  end%  fclose(fpout);   %  %  system = 2;%  fpout = fopen(sprintf('/Users/asta10/Desktop/Research/PMCs/%04d%s%02d/RX%d/Goodfilelist.txt',year,smonth(month,:),day(dd),system),'w');%  fprintf(fpout,'%d \n',length(goodfiles2))%  for i = 1: length(goodfiles2)%  fprintf(fpout,'%s%04d\n',templateB,goodfiles2(i,7));%  end%  fclose(fpout);  %  %     % end% %% Old parameters used for PALs before refurbishment% T0=[176,168];						% Assumed temperature for 374 nm scan on 30 Aug 2002, 372 nm scan on 14 Aug 2002% SigmaD0=[433e6,425e6];				% Doppler Broadening for temperature T0% SigmaL_1=[437.0e6,435.3e6];			% Laser Linewidth (narrow peak)% SigmaL_2=[14212e6,14212e6];			% Laser Linewidth (wide peak)% %A=[0.448,0.552];					% energy portion of narrow peak and wide peak for 372nm and old 374nm laser% %AA=[0.75,0.25];					% energy portion of narrow peak and wide peak for new 374nm laser% % to read in the AA and A factors for each date at Rothera% fin=fopen([sprintf('/Users/chu/Tiger/ScienceProjects/Rothera/DataProcess/RotheraPMC/RotheraAAfactor.dat')],'r');% fscanf(fin,'%s	%s	%s	%s	%s	%s	%s',[7]);% RotheraAA=fscanf(fin, '%d	%d	%d	%f	%f	%f	%f', [7 inf]);% RotheraAA=RotheraAA';% fclose(fin);% AAmdy=RotheraAA(:,1:3);% AA=RotheraAA(find(AAmdy(:,1)==month & AAmdy(:,2)==day & AAmdy(:,3)==year),4:5)  % for 374nm channel % A=RotheraAA(find(AAmdy(:,1)==month & AAmdy(:,2)==day & AAmdy(:,3)==year),6:7)   % for 372nm channel% sigmaDsimga0=[461.8e6*0.876e-16,463.8e6*0.943e-16];		% 									% sigmaD(T=200K)*sigma0(T=200K)% lambda_ref=[373.8195e-9,372.0995e-9];	% reference Wavelength [747.6390, 744.1990]/2*1e-9 (m)% %lambda=[373.8196e-9,372.0996e-9];	% Laser Wavelength [747.6392, 744.1992]/2*1e-9 (m) used during taking data% lambda=[373.81965e-9,372.0996e-9];	% Laser Wavelength [747.6393, 744.1992]/2*1e-9 (m) used during taking data% %lambda=[373.8196e-9,372.09955e-9];	% Laser Wavelength [747.6392, 744.1991]/2*1e-9 (m) used during taking data% % % the following dnu and dnu_real are obtained after wavemeter calibration at BAS, and should be used for data at BAS and at Rothera% dnu_0=[-314.6e6,-176.5e6];			% Frequency Offset (Hz) for Wavelength Scan at BAS (obtained from Gaussian fit): % 									% i.e., Fe spectrum peak frequency relative to wavelegnth [747.6390, 744.1990]/2% dnu_lambda=(c./lambda-c./lambda_ref);	% 									% Frequency offset (Hz) of laser wavelength relative to reference wavelength% dnu_real=dnu_lambda-dnu_0;			% Frequency offset (Hz) of laser wavelength relative to Fe spectrum peak freuqencyend